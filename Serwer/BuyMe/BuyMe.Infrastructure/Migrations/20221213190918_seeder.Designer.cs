// <auto-generated />
using System;
using BuyMe.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BuyMe.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221213190918_seeder")]
    partial class seeder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BuyMe.Domain.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BookCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("NumOfPag")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Publishinghosue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Releasedate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BookCategoryId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BuyMe.Domain.Entities.BookCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BooksCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2022, 12, 13, 20, 9, 18, 533, DateTimeKind.Local).AddTicks(1503),
                            Name = "Fantazy"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2022, 12, 13, 20, 9, 18, 533, DateTimeKind.Local).AddTicks(1538),
                            Name = "Historyczny"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2022, 12, 13, 20, 9, 18, 533, DateTimeKind.Local).AddTicks(1540),
                            Name = "Sci-fi"
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2022, 12, 13, 20, 9, 18, 533, DateTimeKind.Local).AddTicks(1541),
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2022, 12, 13, 20, 9, 18, 533, DateTimeKind.Local).AddTicks(1543),
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2022, 12, 13, 20, 9, 18, 533, DateTimeKind.Local).AddTicks(1544),
                            Name = "Biografia i reportaż"
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2022, 12, 13, 20, 9, 18, 533, DateTimeKind.Local).AddTicks(1545),
                            Name = "Literatura dziecięca"
                        });
                });

            modelBuilder.Entity("BuyMe.Domain.Entities.BookComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Stars")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("BooksComment");
                });

            modelBuilder.Entity("BuyMe.Domain.Entities.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("FilmCategoryId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Releasedate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FilmCategoryId");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("BuyMe.Domain.Entities.FilmCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FilmsCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2022, 12, 13, 20, 9, 18, 533, DateTimeKind.Local).AddTicks(1679),
                            Name = "Fantazy"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2022, 12, 13, 20, 9, 18, 533, DateTimeKind.Local).AddTicks(1681),
                            Name = "Historyczny"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2022, 12, 13, 20, 9, 18, 533, DateTimeKind.Local).AddTicks(1682),
                            Name = "Sci-fi"
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2022, 12, 13, 20, 9, 18, 533, DateTimeKind.Local).AddTicks(1684),
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2022, 12, 13, 20, 9, 18, 533, DateTimeKind.Local).AddTicks(1685),
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2022, 12, 13, 20, 9, 18, 533, DateTimeKind.Local).AddTicks(1686),
                            Name = "Komedia"
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2022, 12, 13, 20, 9, 18, 533, DateTimeKind.Local).AddTicks(1687),
                            Name = "Kryminał"
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2022, 12, 13, 20, 9, 18, 533, DateTimeKind.Local).AddTicks(1689),
                            Name = "Muzyczny"
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2022, 12, 13, 20, 9, 18, 533, DateTimeKind.Local).AddTicks(1690),
                            Name = "Przygodowy"
                        });
                });

            modelBuilder.Entity("BuyMe.Domain.Entities.FilmComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<byte>("Stars")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("UserId");

                    b.ToTable("FilmsComment");
                });

            modelBuilder.Entity("BuyMe.Domain.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Carrier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GameCategoryId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Producer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Releasedate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("GameCategoryId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("BuyMe.Domain.Entities.GameCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GamesCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2022, 12, 13, 20, 9, 18, 533, DateTimeKind.Local).AddTicks(1656),
                            Name = "Zręcznościowe"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2022, 12, 13, 20, 9, 18, 533, DateTimeKind.Local).AddTicks(1658),
                            Name = "Przygodowe"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2022, 12, 13, 20, 9, 18, 533, DateTimeKind.Local).AddTicks(1659),
                            Name = "Fabularne"
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2022, 12, 13, 20, 9, 18, 533, DateTimeKind.Local).AddTicks(1661),
                            Name = "Strategiczne"
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2022, 12, 13, 20, 9, 18, 533, DateTimeKind.Local).AddTicks(1662),
                            Name = "Symulacyjne"
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2022, 12, 13, 20, 9, 18, 533, DateTimeKind.Local).AddTicks(1663),
                            Name = "Sportowe"
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2022, 12, 13, 20, 9, 18, 533, DateTimeKind.Local).AddTicks(1664),
                            Name = "Edukacyjne"
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2022, 12, 13, 20, 9, 18, 533, DateTimeKind.Local).AddTicks(1666),
                            Name = "Logiczne"
                        });
                });

            modelBuilder.Entity("BuyMe.Domain.Entities.GameComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<byte>("Stars")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("GamesComment");
                });

            modelBuilder.Entity("BuyMe.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("BuyMe.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateofBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<byte[]>("Picture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BuyMe.Domain.Entities.Book", b =>
                {
                    b.HasOne("BuyMe.Domain.Entities.BookCategory", "BookCategory")
                        .WithMany("Books")
                        .HasForeignKey("BookCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookCategory");
                });

            modelBuilder.Entity("BuyMe.Domain.Entities.BookComment", b =>
                {
                    b.HasOne("BuyMe.Domain.Entities.Book", "Book")
                        .WithMany("BookComments")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuyMe.Domain.Entities.User", "User")
                        .WithMany("BookComment")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BuyMe.Domain.Entities.Film", b =>
                {
                    b.HasOne("BuyMe.Domain.Entities.FilmCategory", "FilmCategory")
                        .WithMany("Films")
                        .HasForeignKey("FilmCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilmCategory");
                });

            modelBuilder.Entity("BuyMe.Domain.Entities.FilmComment", b =>
                {
                    b.HasOne("BuyMe.Domain.Entities.Film", "Film")
                        .WithMany("FilmComments")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuyMe.Domain.Entities.User", "User")
                        .WithMany("FilmComment")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BuyMe.Domain.Entities.Game", b =>
                {
                    b.HasOne("BuyMe.Domain.Entities.GameCategory", "GameCategory")
                        .WithMany("Games")
                        .HasForeignKey("GameCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameCategory");
                });

            modelBuilder.Entity("BuyMe.Domain.Entities.GameComment", b =>
                {
                    b.HasOne("BuyMe.Domain.Entities.Game", "Game")
                        .WithMany("GameComments")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuyMe.Domain.Entities.User", "User")
                        .WithMany("GameComment")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BuyMe.Domain.Entities.User", b =>
                {
                    b.HasOne("BuyMe.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BuyMe.Domain.Entities.Book", b =>
                {
                    b.Navigation("BookComments");
                });

            modelBuilder.Entity("BuyMe.Domain.Entities.BookCategory", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BuyMe.Domain.Entities.Film", b =>
                {
                    b.Navigation("FilmComments");
                });

            modelBuilder.Entity("BuyMe.Domain.Entities.FilmCategory", b =>
                {
                    b.Navigation("Films");
                });

            modelBuilder.Entity("BuyMe.Domain.Entities.Game", b =>
                {
                    b.Navigation("GameComments");
                });

            modelBuilder.Entity("BuyMe.Domain.Entities.GameCategory", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("BuyMe.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BuyMe.Domain.Entities.User", b =>
                {
                    b.Navigation("BookComment");

                    b.Navigation("FilmComment");

                    b.Navigation("GameComment");
                });
#pragma warning restore 612, 618
        }
    }
}
